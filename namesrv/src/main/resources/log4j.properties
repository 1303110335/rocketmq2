log4j.rootLogger=info, stdout, logFile, errFile
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
#%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
#%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。
#%r：输出自应用程序启动到输出该log信息耗费的毫秒数。
#%t：输出产生该日志事件的线程名。
#%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
#%c：输出日志信息所属的类目，通常就是所在类的全名。
#%M：输出产生日志信息的方法名。
#%F：输出日志消息产生时所在的文件名称。
#%L:：输出代码中的行号。
#%m:：输出代码中指定的具体日志信息。
#%n：输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"。
#%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
#%%：输出一个"%"字符。
# 日志文件(logFile)
log4j.appender.logFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.logFile.Threshold=warn
log4j.appender.logFile.ImmediateFlush=true
log4j.appender.logFile.Append=true
log4j.appender.logFile.File=logs/warn.log
log4j.appender.logFile.DatePattern=yyyy-MM-dd
log4j.appender.logFile.layout=org.apache.log4j.PatternLayout
log4j.appender.logFile.layout.ConversionPattern=[%-5p] %d(%r) --> [%t] %l: %m %x %n
# 日志（记录error）
log4j.appender.errFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.errFile.Threshold=error
log4j.appender.errFile.ImmediateFlush=true
log4j.appender.errFile.Append=true
log4j.appender.errFile.File=logs/error.log
log4j.appender.errFile.DatePattern=yyyy-MM-dd
log4j.appender.errFile.layout=org.apache.log4j.PatternLayout
log4j.appender.errFile.layout.ConversionPattern=[%-5p] %d(%r) --> [%t] %l: %m %x %n

